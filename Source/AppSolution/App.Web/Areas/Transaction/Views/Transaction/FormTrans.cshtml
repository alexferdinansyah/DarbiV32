@model App.Web.Areas.Transaction.Models.TransactionFormCreateVM
@{
    ViewBag.Title = "Form Transaksi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/chosen.css" />
<script src="~/Scripts/chosen.jquery.min.js"></script>

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())

{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.Nosisda)
    @Html.HiddenFor(model => model.tipebayar)
    @*@Html.HiddenFor(model => model.BankId)*@
    @Html.HiddenFor(model => model.bulanspp)
    @Html.HiddenFor(model => model.periode)
    @Html.HiddenFor(model => model.Tingkat)

    <div class="form-horizontal">
        @*KETERANGAN SISWA*@
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Nosisda, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nosisda, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Namasiswa, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Namasiswa, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Kelastingkat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Kelastingkat, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        @*Biaya Masuk*@
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.totalBM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.totalBM, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.sisaTagihanBM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sisaTagihanBM, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.bayarBM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bayarBM, new { htmlAttributes = new { @class = "form-control parameter", AutoComplete = "off" } })
            </div>
        </div>
        <hr />
        @*Bayar Spp*@
        <div class="form-group">
            @Html.LabelFor(model => model.bulanspp, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.getBulan, new SelectList(" "), new { @class = "form-control chosen-select", @multiple = "true" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.periode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("listperiode")
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.bayarspp, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bayarspp, new { htmlAttributes = new { @class = "form-control parameter", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.komiteSekolah, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.komiteSekolah, new { htmlAttributes = new { @class = "form-control parameter", @readonly = "readonly" } })
            </div>
        </div>

        <hr />

        @*Daftar Ulang*@
        <div class="form-group" id="du1">
            @Html.LabelFor(model => model.daftarUlang, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.daftarUlang, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group" id="du2">
            @Html.LabelFor(model => model.sisaTagihanDU, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sisaTagihanDU, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group" id="du3">
            @Html.LabelFor(model => model.bayarDaftarUlang, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bayarDaftarUlang, new { htmlAttributes = new { @class = "form-control parameter", AutoComplete = "off" } })
            </div>
        </div>
        <hr id="du4" />

        @*school support*@
        @*<div class="form-group">
                @Html.LabelFor(model => model.SSId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.getSS, Model.SS.Select
                                         (x => new SelectListItem { Text = x.JenisSS, Value = x.SSId.ToString() }), new { @class = "form-control chosen-select", @multiple = "true" })
                    @Html.ValidationMessageFor(model => model.SSId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group box" id="bulanca">
                @Html.LabelFor(model => model.bulanCA, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.bulanCA, Model.BulanAJCA.Select
                                         (x => new SelectListItem { Text = x.namaBulan, Value = x.namaBulan }), new { @class = "form-control chosen-select", @multiple = "true" })
                </div>
            </div>
            <div class="form-group" id="bulanaj">
                @Html.LabelFor(model => model.bulanAJ, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.bulanAJ, Model.BulanAJCA.Select
                                         (x => new SelectListItem { Text = x.namaBulan, Value = x.namaBulan }), new { @class = "form-control chosen-select", @multiple = "true" })
                </div>
            </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.JenisSS, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.getSS, Model.SS.Select
                                     (x => new SelectListItem { Text = x.JenisSS, Value = x.SSId.ToString() }), new { @class = "form-control chosen-select getSS", @multiple = "true" })
                @*@Html.EditorFor(model => model.SS, new { htmlAttributes = new { @class = "form-control parameter", AutoComplete = "off" } })*@
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.nominal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="append">
                @Html.EditorFor(model => model.nominal, new { htmlAttributes = new { @class = "form-control parameter", AutoComplete = "off" } })
            </div>
        </div>

        <hr />

        <div class="form-group" id="tipebayar1">
            @Html.LabelFor(model => model.tipebayar, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("OpTrans")
            </div>
        </div>
        <div class="form-group" id="tipebayar4">
            @Html.LabelFor(model => model.uang, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uang, new { htmlAttributes = new { @class = "form-control", AutoComplete = "off" } })
            </div>
        </div>
        <div class="form-group" id="tipebayar2">
            @Html.LabelFor(model => model.BankId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.BankId, Model.Bank(), "-- Please select --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" id="tipebayar3">
            @Html.LabelFor(model => model.tgltransfer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.tgltransfer, "{0:dd-MM-yyyy}", new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @*"{0:yyyy-MM-dd}", new { htmlAttributes = new { @class = "form-control"}*@
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.total, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.total, new { htmlAttributes = new { @class = "form-control total", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Bayar!" class="btn btn-default" id="open-popup" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index", new { NamaSiswa = System.Web.HttpContext.Current.Session["NamaSiswa"] })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script type="text/javascript">
    $(document).ready(function () {
        $(".chosen-select").chosen();
        //$('#getSS').change(function () {
        //    var lastField = $("#buildyourform div:last");
        //    var intId = (lastField && lastField.length && lastField.data("idx") + 1) || 1;
        //    var fieldWrapper = $("<div class=\"fieldwrapper\" id=\"field" + intId + "\"/>");
        //    fieldWrapper.data("idx", intId);
        //    var fName = $("<input type=\"text\" class=\"fieldname\" />");
        //    var fType = $("<select class=\"fieldtype\"><option value=\"checkbox\">Checked</option><option value=\"textbox\">Text</option><option value=\"textarea\">Paragraph</option></select>");
        //    var removeButton = $("<input type=\"button\" class=\"remove\" value=\"-\" />");
        //    removeButton.click(function() {
        //        $(this).parent().remove();
        //    });
        //    fieldWrapper.append(fName);
        //    fieldWrapper.append(fType);
        //    fieldWrapper.append(removeButton);
        //    $("#buildyourform").append(fieldWrapper);
        //});
        // Apply select2
        //$('.chosen-select').chosen()

        // Just a small helper
        var _h = {
            capitalize: function (str) {
                return str.charAt(0).toUpperCase() + str.slice(1)
            },
            render: function (id, name) {
                var html = ''

                $.each([1], function (k, v) {
                    html += '<input type="text" name="nominal[]" placeholder="' + _h.capitalize(name) + '" class="form-control parameter" autocomplete="off"><br>'
                })

                return html
            }
        }

        // Now listed to change event of select2
        $(document).on('change', '.getSS', function () {
            $('#append').html('') // truncate any appended nodes

            $(this).find(':selected').each(function (k, v) {
                $('#append').append(_h.render($(this).val(), $(this).text()))
            })

            $(".parameter").on("input", function () {
                var total = 0;
                $(".parameter").each(function () {
                    if (!isNaN(parseInt($(this).val()))) {
                        total += parseInt($(this).val());
                    }
                });
                $(".total").val(total);
            });
        });

        $('#listperiode').change(function () {
            $.ajax({
                type: "GET",
                url: "/Transaction/Transaction/PeriodeAjax",
                data: { input: $('#listperiode').val() + "." + $('#Nosisda').val() },
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data, status) {
                $('#getBulan').empty();
                $.each(data, function (index, row) {
                    $('#getBulan').append("<option value='" + row.namaBulan + "'>" + row.namaBulan + "</option>").trigger("chosen:updated");
                })
            }
            function errorFunc() {
                alert('error');
            }
        });

        $("#getBulan").change(function () {
            $.ajax({
                type: "POST",
                url: "/Transaction/Transaction/SPPAjax",
                data: { input: $('#getBulan').val() + "-" + $('#Kelastingkat').val() + "-" + $('#Nosisda').val() },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data, status) {
                //alert(data);
                document.getElementById("bayarspp").value = data.SPP;
                document.getElementById("komiteSekolah").value = data.KS;
                var total = 0;
                $(".parameter").each(function () {
                    if (!isNaN(parseInt($(this).val()))) {
                        total += parseInt($(this).val());
                    }
                });
                $(".total").val(total);
                /*$(".total").val(data);*/
            }

            function errorFunc() {
                alert('Belum Ada Biaya pada masterdata');
            }
        });


        //$("#getSS").change(function () {
        //    $("#bulanca").fadeIn("fast")[$.inArray('10', $(this).val()) >= 0 ? 'show' : 'hide']();
        //    $("#bulanaj").fadeIn("fast")[$.inArray('11', $(this).val()) >= 0 ? 'show' : 'hide']();
        //    $.ajax({
        //        type: "POST",
        //        url: "/Transaction/Transaction/FirstAjax",
        //        data: { input: $('#getSS').val() + "-" + $('#Kelastingkat').val() + "-" + $('#bulanCA').val() + "-" + $('#bulanAJ').val() + "-" + $('#getBulan').val() },
        //        //contentType: "application/json; charset=utf-8",
        //        //dataType: "json",
        //        success: successFunc,
        //        error: errorFunc
        //    });
        //    function successFunc(data, status) {
        //        //alert(data);
        //        document.getElementById("nominal").value = data;
        //        var total = 0;
        //        $(".parameter").each(function () {
        //            if (!isNaN(parseInt($(this).val()))) {
        //                total += parseInt($(this).val());
        //            }
        //        });
        //        $(".total").val(total);
        //    }

        //    function errorFunc() {
        //        alert('Belum Ada Biaya pada masterdata');
        //    }
        //});

        $("#bulanca").change(function () {
            $.ajax({
                type: "POST",
                url: "/Transaction/Transaction/FirstAjax",
                data: { input: $('#getSS').val() + "-" + $('#Kelastingkat').val() + "-" + $('#bulanCA').val() + "-" + $('#bulanAJ').val() + "-" + $('#getBulan').val() },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data, status) {
                //alert(data);
                document.getElementById("nominal").value = data;
                var total = 0;
                $(".parameter").each(function () {
                    if (!isNaN(parseInt($(this).val()))) {
                        total += parseInt($(this).val());
                    }
                });
                $(".total").val(total);
            }

            function errorFunc() {
                alert('error');
            }
        });

        $("#bulanaj").change(function () {
            $.ajax({
                type: "POST",
                url: "/Transaction/Transaction/FirstAjax",
                data: { input: $('#getSS').val() + "-" + $('#Kelastingkat').val() + "-" + $('#bulanCA').val() + "-" + $('#bulanAJ').val() + "-" + $('#getBulan').val() },
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data, status) {
                //alert(data);
                document.getElementById("nominal").value = data;
                var total = 0;
                $(".parameter").each(function () {
                    if (!isNaN(parseInt($(this).val()))) {
                        total += parseInt($(this).val());
                    }
                });
                $(".total").val(total);
            }

            function errorFunc() {
                alert('error');
            }
        });

        $(".parameter").on("input", function () {
            var total = 0;
            $(".parameter").each(function () {
                if (!isNaN(parseInt($(this).val()))) {
                    total += parseInt($(this).val());
                }
            });
            $(".total").val(total);
        });

        $('#bulanca').hide();
        $('#bulanaj').hide();
        $('#tipebayar2').hide();
        $('#tipebayar3').hide();
        var Tipetrans = document.getElementById("tipebayar");
        var bulanspp = document.getElementById("bulanspp");
        var periode = document.getElementById("periode");
        var kelas = document.getElementById("Kelastingkat");

        $('#OpTrans').change(function () {
            var e = document.getElementById("OpTrans");
            var strUser = e.options[e.selectedIndex].text;
            //alert(strUser);
            Tipetrans.value = strUser;
            if (strUser == "Tunai") {
                $('#tipebayar2').hide();
                $('#tipebayar3').hide();
                $('#tipebayar4').show();
            }

            if (strUser == "Transfer") {
                $('#tipebayar2').show();
                $('#tipebayar3').show();
                $('#tipebayar4').hide();
                //alert(document.getElementById("BankId").value);
                document.getElementById("BankId").change(function () {
                    var e = document.getElementById("BankId");
                    var strUser = e.options[e.selectedIndex].text;
                    alert(strUser);
                });
            }
        });

        //konfirmasi popup dan tampilkan kembalian jika pembayaran tunai
        $("#open-popup").click(function () {
            var e = document.getElementById("OpTrans");
            var strUser = e.options[e.selectedIndex].text;

            var val1 = document.getElementById("uang").value;
            var val2 = document.getElementById("total").value;
            var tot = '';
            if (strUser == "Tunai") {
                tot = Number(val1) - Number(val2);
                var res = confirm("Lakukan Transaksi ?\n\nKembalian = Rp. " + tot);
            } else var res = confirm("Lakukan Transaksi ?");
            return !!res;

        });

        $('#listbln').change(function () {
            var e = document.getElementById("listbln");
            var strUser = e.options[e.selectedIndex].text;
            bulanspp.value = strUser;
        });

        $('#listperiode').change(function () {
            var e = document.getElementById("listperiode");
            var strUser = e.options[e.selectedIndex].text;
            periode.value = strUser;
            //alert(strUser);
        });

        if (Tingkat.value != "TK A" && Tingkat.value != "PG") {
            $('#du1').hide();
            $('#du2').hide();
            $('#du3').hide();
            $('#du4').hide();
            $('#du5').hide();
        }

    });
</script>